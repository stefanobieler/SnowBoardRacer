//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Input/SnowBoardInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SnowBoardInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SnowBoardInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SnowBoardInputAction"",
    ""maps"": [
        {
            ""name"": ""SnowBoard"",
            ""id"": ""b0fd11ad-7c1b-41d4-afd2-22c246aeea9c"",
            ""actions"": [
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Button"",
                    ""id"": ""c54246fd-10a3-4d5b-b183-22ff0773edc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c9c6a3ee-3cf1-4e8f-8b68-fd01719c49f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c8682627-a1d8-42a3-a7a7-e6c32f0194be"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""036c0478-cc51-4c07-8426-62be28dba5aa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SnowBoard
        m_SnowBoard = asset.FindActionMap("SnowBoard", throwIfNotFound: true);
        m_SnowBoard_Tilt = m_SnowBoard.FindAction("Tilt", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SnowBoard
    private readonly InputActionMap m_SnowBoard;
    private ISnowBoardActions m_SnowBoardActionsCallbackInterface;
    private readonly InputAction m_SnowBoard_Tilt;
    public struct SnowBoardActions
    {
        private @SnowBoardInputAction m_Wrapper;
        public SnowBoardActions(@SnowBoardInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tilt => m_Wrapper.m_SnowBoard_Tilt;
        public InputActionMap Get() { return m_Wrapper.m_SnowBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnowBoardActions set) { return set.Get(); }
        public void SetCallbacks(ISnowBoardActions instance)
        {
            if (m_Wrapper.m_SnowBoardActionsCallbackInterface != null)
            {
                @Tilt.started -= m_Wrapper.m_SnowBoardActionsCallbackInterface.OnTilt;
                @Tilt.performed -= m_Wrapper.m_SnowBoardActionsCallbackInterface.OnTilt;
                @Tilt.canceled -= m_Wrapper.m_SnowBoardActionsCallbackInterface.OnTilt;
            }
            m_Wrapper.m_SnowBoardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tilt.started += instance.OnTilt;
                @Tilt.performed += instance.OnTilt;
                @Tilt.canceled += instance.OnTilt;
            }
        }
    }
    public SnowBoardActions @SnowBoard => new SnowBoardActions(this);
    public interface ISnowBoardActions
    {
        void OnTilt(InputAction.CallbackContext context);
    }
}
